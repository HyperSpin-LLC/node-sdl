name: Build Prebuilt Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [18, 20]
        
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        id: setup-node
        continue-on-error: true
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          cache-dependency-path: package-lock.json

      - name: Clear npm cache (Unix)
        if: steps.setup-node.outcome == 'failure' && runner.os != 'Windows'
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
        shell: bash

      - name: Clear npm cache (Windows)
        if: steps.setup-node.outcome == 'failure' && runner.os == 'Windows'
        run: |
          npm cache clean --force
          Remove-Item -Path node_modules,package-lock.json -Recurse -Force -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Retry Setup Node.js
        uses: actions/setup-node@v4
        if: steps.setup-node.outcome == 'failure'
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: npm ci

      - name: Install SDL2 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev
          echo "SDL_INC=/usr/include/SDL2" >> $GITHUB_ENV
          echo "SDL_LIB=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      - name: Install SDL2 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install sdl2
          echo "SDL_INC=/usr/local/include/SDL2" >> $GITHUB_ENV
          echo "SDL_LIB=/usr/local/lib" >> $GITHUB_ENV

      - name: Install SDL2 (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $sdl_version="2.28.5"
          $sdl_url="https://github.com/libsdl-org/SDL/releases/download/release-${sdl_version}/SDL2-devel-${sdl_version}-VC.zip"
          Invoke-WebRequest -Uri $sdl_url -OutFile SDL2.zip
          Expand-Archive SDL2.zip -DestinationPath .
          mkdir C:\SDL2
          Copy-Item -Path "SDL2-${sdl_version}\include" -Destination "C:\SDL2\include" -Recurse -Force
          Copy-Item -Path "SDL2-${sdl_version}\lib\x64" -Destination "C:\SDL2\lib" -Recurse -Force
          echo "SDL_INC=C:\SDL2\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "SDL_LIB=C:\SDL2\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Copy-Item "SDL2-${sdl_version}\lib\x64\SDL2.dll" -Destination "C:\SDL2\lib\" -Force
        
      - name: Build
        run: npm run build
        
      - name: Package prebuilt
        run: |
          mkdir -p prebuilds
          cp build/Release/*.node prebuilds/
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}-node${{ matrix.node }}
          path: prebuilds/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release
        run: |
          mkdir -p prebuilds
          cp -r artifacts/*/* prebuilds/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: prebuilds/*
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
